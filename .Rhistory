sep = '\t',
header = TRUE,
quote = "\"")
knitr::opts_chunk$set(echo = TRUE)
data <- read.table(file = '../data/curated_gene_disease_associations.tsv',
sep = '\t',
header = TRUE,
quote = "\"")
?readRDS
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(igraph)
edges_df <- readRDS(file = "edges.rds")
nodes_df <- readRDS(file = "nodes.rds")
g <- graph_from_data_frame(
d = edges_df,
vertices = nodes_df,
directed = FALSE
)
V(g)[1:5]
# vertex_attr(g)
E(g)[1:5]
edge_attr(g)
edge_attr(g)
E(g)[1:5]
edge_attr(g)
plot(g, vertex.label=NA)
write_graph(g, file="network.graphml", format="graphml")
head(nodes_df)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(igraph)
data <- read.table(file = '../data/curated_gene_disease_associations.tsv',
sep = '\t',
header = TRUE,
quote = "\"")
df_temp <- data[c("geneId", "diseaseId")]
shared_genes <- df_temp %>%
inner_join(df_temp, by = "geneId") %>%
# Filter out when when rows where two disorders are the same
filter(diseaseId.x != diseaseId.y) %>%
# Filter out duplicate rows where
# diseaseId.x and diseaseId.y in row1 is reverse in row2
filter(diseaseId.x < diseaseId.y)
# Inspect
shared_genes[shared_genes$geneId == 1, ]
# count shared genes per disorder
shared_genes <- shared_genes %>%
group_by(diseaseId.x, diseaseId.y) %>%
summarise(n_shared_genes = n(),
.groups = "drop")
head(shared_genes)
pvalue_hyper <- function(q, m, n, k, lower.tail=FALSE){
# q size intersection
# m size of B
# n size of universe
# k size of A
if (lower.tail == FALSE){
phyper(q, m, n, k, lower.tail = FALSE)+ dhyper(q, m, n, k)
} else{
phyper(q, m, n, k)
}
}
pvalue_hyper.0 <- function(A, B, num_tot, lower.tail=FALSE){
setA <- unique(A)
setB <- unique(B)
nA <- length(setA)
nB <- length(setB)
AB <- intersect(setA,setB)
nAB <- length(AB)
return(pvalue_hyper(nAB, nB, num_tot - nB, nA, lower.tail = lower.tail))
}
disorder_a <- c("a", "b", "c", "d", "e", "f", "g")
disorder_b <- c("f", "g", "h", "i", "j", "k", "l", "m", "n")
pvalue_hyper.0(disorder_a, disorder_b, 100)
pvalue_hyper.0(disorder_b, disorder_a, 100)
phyper(2, 9, 100-9, 7, lower.tail = FALSE) + dhyper(2, 9, 100-9, 7)
phyper(2, 7, 100-7, 9, lower.tail = FALSE) + dhyper(2, 7, 100-7, 9)
pvalue_hyper(2, 9, 100-9, 7, lower.tail = FALSE)
disease_genes <- data %>%
select(geneId, diseaseId) %>%
distinct() %>%
group_by(diseaseId) %>%
summarise(n_genes = n(),
.groups = "drop")
head(disease_genes)
shared_genes <- shared_genes %>%
inner_join(disease_genes, by = c("diseaseId.x" = "diseaseId")) %>%
inner_join(disease_genes, by = c("diseaseId.y" = "diseaseId"))
head(shared_genes)
n_comparisons <- nrow(shared_genes)
n_total_genes <- length(unique(data$geneId))
shared_genes_p <- shared_genes %>%
mutate(n_total_genes = n_total_genes,
p = pvalue_hyper(n_shared_genes, n_genes.y, n_total_genes, n_genes.x),
p_bonferroni = p*n_comparisons,
p_log = -log10(p),
p_bonferroni_log = -log10(p))
head(shared_genes_p)
summary(shared_genes_p$p_log)
hist(shared_genes_p$p_log)
summary(shared_genes_p$p_log)
# Number of significant disorder pairs based on p < .001
sum(shared_genes_p$p_log > 2)
# proportion of significant pairs out of all pairs
sum(shared_genes_p$p_log > 2) / n_comparisons
head(shared_genes_p, 1)
edges_df <- shared_genes_p[shared_genes_p$p_log>2, ] %>%
select(diseaseId.x, diseaseId.y, n_shared_genes, p_log)
head(edges_df)
head(data)
nodes_df <- data[c("diseaseId", "diseaseName", "diseaseType", "diseaseClass", "diseaseSemanticType")] %>%
distinct()
head(disease_genes)
head(nodes_df)
head(disease_genes, 1)
nodes_df %>%
inner_join(disease_genes, by="diseaseId")
head(disease_genes, 1)
nodes_df <- nodes_df %>%
inner_join(disease_genes, by="diseaseId")
head(nodes_df)
nodes_df <- nodes_df %>%
inner_join(disease_genes, by="diseaseId")
head(nodes_df)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(igraph)
edges_df <- readRDS(file = "edges.rds")
nodes_df <- readRDS(file = "nodes.rds")
g <- graph_from_data_frame(
d = edges_df,
vertices = nodes_df,
directed = FALSE
)
V(g)[1:5]
# vertex_attr(g)
E(g)[1:5]
write_graph(g, file="network.graphml", format="graphml")
head(edges_df)
type(edges_df)
edges_df[!complete.cases(edges_df), ]
summary(edges_df$p_log)
summary(edges_df$p)
summary(edges_df$p_log)
View(edges_df)
View(shared_genes)
View(shared_genes_p)
log10(1*10^(-40))
log10(0.1*10^(-40))
log10(0.1*10^(-400))
log10(0.1*10^(-322))
log10(0.1*10^(-323))
log10(0.1*10^(-322.5))
log10(0.1*10^(-322.6))
log10(0.1*10^(-322.7))
log10(0.1*10^(-322.6))
log10(0.1^(322.6))
log10(0.1^(323.6))
log10(0.1^(323.7))
log10(0.1^(323.65))
log10(0.1^(323.62))
log10(0.1^(323.61))
log10(0.1^(323.6))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(igraph)
data <- read.table(file = '../data/curated_gene_disease_associations.tsv',
sep = '\t',
header = TRUE,
quote = "\"")
df_temp <- data[c("geneId", "diseaseId")]
shared_genes <- df_temp %>%
inner_join(df_temp, by = "geneId") %>%
# Filter out when when rows where two disorders are the same
filter(diseaseId.x != diseaseId.y) %>%
# Filter out duplicate rows where
# diseaseId.x and diseaseId.y in row1 is reverse in row2
filter(diseaseId.x < diseaseId.y)
# Inspect
shared_genes[shared_genes$geneId == 1, ]
# count shared genes per disorder
shared_genes <- shared_genes %>%
group_by(diseaseId.x, diseaseId.y) %>%
summarise(n_shared_genes = n(),
.groups = "drop")
head(shared_genes)
pvalue_hyper <- function(q, m, n, k, lower.tail=FALSE){
# q size intersection
# m size of B
# n size of universe
# k size of A
if (lower.tail == FALSE){
phyper(q, m, n, k, lower.tail = FALSE)+ dhyper(q, m, n, k)
} else{
phyper(q, m, n, k)
}
}
pvalue_hyper.0 <- function(A, B, num_tot, lower.tail=FALSE){
setA <- unique(A)
setB <- unique(B)
nA <- length(setA)
nB <- length(setB)
AB <- intersect(setA,setB)
nAB <- length(AB)
return(pvalue_hyper(nAB, nB, num_tot - nB, nA, lower.tail = lower.tail))
}
disorder_a <- c("a", "b", "c", "d", "e", "f", "g")
disorder_b <- c("f", "g", "h", "i", "j", "k", "l", "m", "n")
pvalue_hyper.0(disorder_a, disorder_b, 100)
pvalue_hyper.0(disorder_b, disorder_a, 100)
phyper(2, 9, 100-9, 7, lower.tail = FALSE) + dhyper(2, 9, 100-9, 7)
phyper(2, 7, 100-7, 9, lower.tail = FALSE) + dhyper(2, 7, 100-7, 9)
pvalue_hyper(2, 9, 100-9, 7, lower.tail = FALSE)
disease_genes <- data %>%
select(geneId, diseaseId) %>%
distinct() %>%
group_by(diseaseId) %>%
summarise(n_genes = n(),
.groups = "drop")
head(disease_genes)
shared_genes <- shared_genes %>%
inner_join(disease_genes, by = c("diseaseId.x" = "diseaseId")) %>%
inner_join(disease_genes, by = c("diseaseId.y" = "diseaseId"))
head(shared_genes)
n_comparisons <- nrow(shared_genes)
n_total_genes <- length(unique(data$geneId))
shared_genes_p <- shared_genes %>%
mutate(n_total_genes = n_total_genes,
p = pvalue_hyper(n_shared_genes, n_genes.y, n_total_genes, n_genes.x),
p_bonferroni = p*n_comparisons,
p_log = -log10(p),
p_bonferroni_log = -log10(p))
head(shared_genes_p)
log10(0.1^(323.6))
head(shared_genes)
n_comparisons <- nrow(shared_genes)
n_total_genes <- length(unique(data$geneId))
shared_genes_p <- shared_genes %>%
mutate(n_total_genes = n_total_genes,
p = pvalue_hyper(n_shared_genes, n_genes.y, n_total_genes, n_genes.x),
p_bonferroni = p*n_comparisons,
p_log = -log10(p),
p_bonferroni_log = -log10(p))
head(shared_genes_p)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(igraph)
data <- read.table(file = '../data/curated_gene_disease_associations.tsv',
sep = '\t',
header = TRUE,
quote = "\"")
df_temp <- data[c("geneId", "diseaseId")]
shared_genes <- df_temp %>%
inner_join(df_temp, by = "geneId") %>%
# Filter out when when rows where two disorders are the same
filter(diseaseId.x != diseaseId.y) %>%
# Filter out duplicate rows where
# diseaseId.x and diseaseId.y in row1 is reverse in row2
filter(diseaseId.x < diseaseId.y)
# Inspect
shared_genes[shared_genes$geneId == 1, ]
# count shared genes per disorder
shared_genes <- shared_genes %>%
group_by(diseaseId.x, diseaseId.y) %>%
summarise(n_shared_genes = n(),
.groups = "drop")
head(shared_genes)
pvalue_hyper <- function(q, m, n, k, lower.tail=FALSE){
# q size intersection
# m size of B
# n size of universe
# k size of A
if (lower.tail == FALSE){
phyper(q, m, n, k, lower.tail = FALSE)+ dhyper(q, m, n, k)
} else{
phyper(q, m, n, k)
}
}
pvalue_hyper.0 <- function(A, B, num_tot, lower.tail=FALSE){
setA <- unique(A)
setB <- unique(B)
nA <- length(setA)
nB <- length(setB)
AB <- intersect(setA,setB)
nAB <- length(AB)
return(pvalue_hyper(nAB, nB, num_tot - nB, nA, lower.tail = lower.tail))
}
disorder_a <- c("a", "b", "c", "d", "e", "f", "g")
disorder_b <- c("f", "g", "h", "i", "j", "k", "l", "m", "n")
pvalue_hyper.0(disorder_a, disorder_b, 100)
pvalue_hyper.0(disorder_b, disorder_a, 100)
phyper(2, 9, 100-9, 7, lower.tail = FALSE) + dhyper(2, 9, 100-9, 7)
phyper(2, 7, 100-7, 9, lower.tail = FALSE) + dhyper(2, 7, 100-7, 9)
pvalue_hyper(2, 9, 100-9, 7, lower.tail = FALSE)
disease_genes <- data %>%
select(geneId, diseaseId) %>%
distinct() %>%
group_by(diseaseId) %>%
summarise(n_genes = n(),
.groups = "drop")
head(disease_genes)
shared_genes <- shared_genes %>%
inner_join(disease_genes, by = c("diseaseId.x" = "diseaseId")) %>%
inner_join(disease_genes, by = c("diseaseId.y" = "diseaseId"))
n_comparisons <- nrow(shared_genes)
n_total_genes <- length(unique(data$geneId))
shared_genes_p <- shared_genes %>%
mutate(n_total_genes = n_total_genes,
p = pvalue_hyper(n_shared_genes, n_genes.y, n_total_genes, n_genes.x),
p_bonferroni = p*n_comparisons,
p_log = -log10(p),
p_bonferroni_log = -log10(p))
head(shared_genes_p)
summary(shared_genes_p$p_log)
hist(shared_genes_p$p_log)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(igraph)
data <- read.table(file = '../data/curated_gene_disease_associations.tsv',
sep = '\t',
header = TRUE,
quote = "\"")
df_temp <- data[c("geneId", "diseaseId")]
shared_genes <- df_temp %>%
inner_join(df_temp, by = "geneId") %>%
# Filter out when when rows where two disorders are the same
filter(diseaseId.x != diseaseId.y) %>%
# Filter out duplicate rows where
# diseaseId.x and diseaseId.y in row1 is reverse in row2
filter(diseaseId.x < diseaseId.y)
# Inspect
shared_genes[shared_genes$geneId == 1, ]
# count shared genes per disorder
shared_genes <- shared_genes %>%
group_by(diseaseId.x, diseaseId.y) %>%
summarise(n_shared_genes = n(),
.groups = "drop")
head(shared_genes)
pvalue_hyper <- function(q, m, n, k, lower.tail=FALSE){
# q size intersection
# m size of B
# n size of universe
# k size of A
if (lower.tail == FALSE){
phyper(q, m, n, k, lower.tail = FALSE)+ dhyper(q, m, n, k)
} else{
phyper(q, m, n, k)
}
}
pvalue_hyper.0 <- function(A, B, num_tot, lower.tail=FALSE){
setA <- unique(A)
setB <- unique(B)
nA <- length(setA)
nB <- length(setB)
AB <- intersect(setA,setB)
nAB <- length(AB)
return(pvalue_hyper(nAB, nB, num_tot - nB, nA, lower.tail = lower.tail))
}
disorder_a <- c("a", "b", "c", "d", "e", "f", "g")
disorder_b <- c("f", "g", "h", "i", "j", "k", "l", "m", "n")
pvalue_hyper.0(disorder_a, disorder_b, 100)
pvalue_hyper.0(disorder_b, disorder_a, 100)
phyper(2, 9, 100-9, 7, lower.tail = FALSE) + dhyper(2, 9, 100-9, 7)
phyper(2, 7, 100-7, 9, lower.tail = FALSE) + dhyper(2, 7, 100-7, 9)
pvalue_hyper(2, 9, 100-9, 7, lower.tail = FALSE)
disease_genes <- data %>%
select(geneId, diseaseId) %>%
distinct() %>%
group_by(diseaseId) %>%
summarise(n_genes = n(),
.groups = "drop")
head(disease_genes)
shared_genes <- shared_genes %>%
inner_join(disease_genes, by = c("diseaseId.x" = "diseaseId")) %>%
inner_join(disease_genes, by = c("diseaseId.y" = "diseaseId"))
n_comparisons <- nrow(shared_genes)
n_total_genes <- length(unique(data$geneId))
shared_genes_p <- shared_genes %>%
mutate(n_total_genes = n_total_genes,
p = pvalue_hyper(n_shared_genes, n_genes.y, n_total_genes, n_genes.x))
head(shared_genes_p)
n_comparisons <- nrow(shared_genes)
n_total_genes <- length(unique(data$geneId))
shared_genes_p <- shared_genes %>%
mutate(n_total_genes = n_total_genes,
p = pvalue_hyper(n_shared_genes, n_genes.y, n_total_genes, n_genes.x))
summary(shared_genes_p$p)
shared_genes_p[shared_genes_p$p == 0, p]
shared_genes_p[shared_genes_p$p == 0, "p"]
log10(0.1^(323.6))
shared_genes_p[shared_genes_p$p == 0, "p"] = 0.1^(323.6)
summary(shared_genes_p$p)
shared_genes_p[shared_genes_p$p == 0, "p"] = 0.1^(323.6)
shared_genes_p[shared_genes_p$p == 0, "p"]
shared_genes_p <- shared_genes_p %>%
mutate(p_bonferroni = p*n_comparisons,
p_log = -log10(p),
p_bonferroni_log = -log10(p))
summary(shared_genes_p$p_log)
hist(shared_genes_p$p_log)
View(shared_genes_p)
shared_genes_p <- shared_genes_p %>%
mutate(p_bonferroni = p*n_comparisons,
p_log = -log10(p),
p_bonferroni_log = -log10(p))
summary(shared_genes_p$p_log)
hist(shared_genes_p$p_log)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(igraph)
data <- read.table(file = '../data/curated_gene_disease_associations.tsv',
sep = '\t',
header = TRUE,
quote = "\"")
df_temp <- data[c("geneId", "diseaseId")]
shared_genes <- df_temp %>%
inner_join(df_temp, by = "geneId") %>%
# Filter out when when rows where two disorders are the same
filter(diseaseId.x != diseaseId.y) %>%
# Filter out duplicate rows where
# diseaseId.x and diseaseId.y in row1 is reverse in row2
filter(diseaseId.x < diseaseId.y)
# Inspect
shared_genes[shared_genes$geneId == 1, ]
# count shared genes per disorder
shared_genes <- shared_genes %>%
group_by(diseaseId.x, diseaseId.y) %>%
summarise(n_shared_genes = n(),
.groups = "drop")
head(shared_genes)
pvalue_hyper <- function(q, m, n, k, lower.tail=FALSE){
# q size intersection
# m size of B
# n size of universe
# k size of A
if (lower.tail == FALSE){
phyper(q, m, n, k, lower.tail = FALSE)+ dhyper(q, m, n, k)
} else{
phyper(q, m, n, k)
}
}
pvalue_hyper.0 <- function(A, B, num_tot, lower.tail=FALSE){
setA <- unique(A)
setB <- unique(B)
nA <- length(setA)
nB <- length(setB)
AB <- intersect(setA,setB)
nAB <- length(AB)
return(pvalue_hyper(nAB, nB, num_tot - nB, nA, lower.tail = lower.tail))
}
disorder_a <- c("a", "b", "c", "d", "e", "f", "g")
disorder_b <- c("f", "g", "h", "i", "j", "k", "l", "m", "n")
pvalue_hyper.0(disorder_a, disorder_b, 100)
pvalue_hyper.0(disorder_b, disorder_a, 100)
phyper(2, 9, 100-9, 7, lower.tail = FALSE) + dhyper(2, 9, 100-9, 7)
phyper(2, 7, 100-7, 9, lower.tail = FALSE) + dhyper(2, 7, 100-7, 9)
pvalue_hyper(2, 9, 100-9, 7, lower.tail = FALSE)
disease_genes <- data %>%
select(geneId, diseaseId) %>%
distinct() %>%
group_by(diseaseId) %>%
summarise(n_genes = n(),
.groups = "drop")
head(disease_genes)
shared_genes <- shared_genes %>%
inner_join(disease_genes, by = c("diseaseId.x" = "diseaseId")) %>%
inner_join(disease_genes, by = c("diseaseId.y" = "diseaseId"))
n_comparisons <- nrow(shared_genes)
n_total_genes <- length(unique(data$geneId))
shared_genes_p <- shared_genes %>%
mutate(n_total_genes = n_total_genes,
p = pvalue_hyper(n_shared_genes, n_genes.y, n_total_genes, n_genes.x))
summary(shared_genes_p$p)
shared_genes_p[shared_genes_p$p == 0, "p"] = 0.1^(323.6)
shared_genes_p <- shared_genes_p %>%
mutate(p_bonferroni = p*n_comparisons,
p_log = -log10(p),
p_bonferroni_log = -log10(p))
summary(shared_genes_p$p_log)
hist(shared_genes_p$p_log)
summary(shared_genes_p$p_log)
# Number of significant disorder pairs based on p < .001
sum(shared_genes_p$p_log > 2)
# proportion of significant pairs out of all pairs
sum(shared_genes_p$p_log > 2) / n_comparisons
head(shared_genes_p, 1)
edges_df <- shared_genes_p[shared_genes_p$p_log>2, ] %>%
select(diseaseId.x, diseaseId.y, n_shared_genes, p_log)
head(edges_df)
head(data)
nodes_df <- data[c("diseaseId", "diseaseName", "diseaseType", "diseaseClass", "diseaseSemanticType")] %>%
distinct()
nodes_df <- nodes_df %>%
inner_join(disease_genes, by="diseaseId")
head(nodes_df)
saveRDS(edges_df, file = "edges.rds")
saveRDS(nodes_df, file = "nodes.rds")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(igraph)
edges_df <- readRDS(file = "edges.rds")
nodes_df <- readRDS(file = "nodes.rds")
g <- graph_from_data_frame(
d = edges_df,
vertices = nodes_df,
directed = FALSE
)
V(g)[1:5]
# vertex_attr(g)
E(g)[1:5]
write_graph(g, file="network.graphml", format="graphml")
