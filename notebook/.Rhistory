shared_genes[shared_genes$geneId == 1, ]
# count shared genes per disorder
shared_genes <- shared_genes %>%
group_by(diseaseId.x, diseaseId.y) %>%
summarise(n_shared_genes = n(),
.groups = "drop")
head(shared_genes)
pvalue_hyper <- function(q, m, n, k, lower.tail=FALSE){
# q size intersection
# m size of B
# n size of universe
# k size of A
if (lower.tail == FALSE){
phyper(q, m, n, k, lower.tail = FALSE)+ dhyper(q, m, n, k)
} else{
phyper(q, m, n, k)
}
}
pvalue_hyper.0 <- function(A, B, num_tot, lower.tail=FALSE){
setA <- unique(A)
setB <- unique(B)
nA <- length(setA)
nB <- length(setB)
AB <- intersect(setA,setB)
nAB <- length(AB)
return(pvalue_hyper(nAB, nB, num_tot - nB, nA, lower.tail = lower.tail))
}
disease_genes <- data %>%
select(geneId, diseaseId) %>%
distinct() %>%
group_by(diseaseId) %>%
summarise(n_genes = n(),
.groups = "drop")
head(disease_genes)
shared_genes <- shared_genes %>%
inner_join(disease_genes, by = c("diseaseId.x" = "diseaseId")) %>%
inner_join(disease_genes, by = c("diseaseId.y" = "diseaseId"))
head(shared_genes)
n_comparisons <- nrow(shared_genes)
n_total_genes <- length(unique(data$geneId))
shared_genes_p <- shared_genes %>%
mutate(n_total_genes = n_total_genes,
p = pvalue_hyper(n_shared_genes, n_genes.y, n_total_genes, n_genes.x))
head(shared_genes_p)
summary(shared_genes_p$p)
shared_genes_p[shared_genes_p$p == 0, "p"] = 0.1^(323.6)
shared_genes_p <- shared_genes_p %>%
mutate(p_bonferroni = p*n_comparisons,
p_log = -log10(p),
p_bonferroni_log = -log10(p))
summary(shared_genes_p$p_log)
hist(shared_genes_p$p_log)
summary(shared_genes_p$p_log)
# Number of significant disorder pairs based on p < .001
sum(shared_genes_p$p_log > 2)
# proportion of significant pairs out of all pairs
sum(shared_genes_p$p_log > 2) / n_comparisons
diseases <- data[c("diseaseId", "diseaseName", "diseaseType", "diseaseClass", "diseaseSemanticType")] %>%
distinct()
diseases <- diseases %>%
inner_join(disease_genes, by="diseaseId")
head(diseases)
# import autism terms
autism_df <- read.table(file = 'processed_data/autism_terms.csv',
sep = '\t',
header = TRUE,
quote = "\"")
diseases_new <- diseases %>%
left_join(autism_df[c("diseaseId", "autism_subtype", "autism_subtype_broad")],
by="diseaseId") %>%
mutate(autism_subtype = ifelse(is.na(autism_subtype), "Not Autism", autism_subtype),
autism_subtype_broad = ifelse(is.na(autism_subtype_broad), "Not Autism", autism_subtype_broad))
View(shared_genes_p)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(igraph)
data <- read.table(file = 'processed_data/curated_gene_disease_associations_autism_grouped.csv',
sep = '\t',
header = TRUE,
quote = "\"")
df_temp <- data[c("geneId", "diseaseId")] %>%
distinct()
shared_genes <- df_temp %>%
inner_join(df_temp, by = "geneId") %>%
# Filter out when when rows where two disorders are the same
filter(diseaseId.x != diseaseId.y) %>%
# Filter out duplicate rows where
# diseaseId.x and diseaseId.y in row1 is reverse in row2
filter(diseaseId.x < diseaseId.y)
# Inspect
shared_genes[shared_genes$geneId == 1, ]
# count shared genes per disorder
shared_genes <- shared_genes %>%
group_by(diseaseId.x, diseaseId.y) %>%
summarise(n_shared_genes = n(),
.groups = "drop")
head(shared_genes)
pvalue_hyper <- function(q, m, n, k, lower.tail=FALSE){
# q size intersection
# m size of B
# n size of universe
# k size of A
if (lower.tail == FALSE){
phyper(q, m, n, k, lower.tail = FALSE)+ dhyper(q, m, n, k)
} else{
phyper(q, m, n, k)
}
}
pvalue_hyper.0 <- function(A, B, num_tot, lower.tail=FALSE){
setA <- unique(A)
setB <- unique(B)
nA <- length(setA)
nB <- length(setB)
AB <- intersect(setA,setB)
nAB <- length(AB)
return(pvalue_hyper(nAB, nB, num_tot - nB, nA, lower.tail = lower.tail))
}
disease_genes <- data %>%
select(geneId, diseaseId) %>%
distinct() %>%
group_by(diseaseId) %>%
summarise(n_genes = n(),
.groups = "drop")
head(disease_genes)
shared_genes <- shared_genes %>%
inner_join(disease_genes, by = c("diseaseId.x" = "diseaseId")) %>%
inner_join(disease_genes, by = c("diseaseId.y" = "diseaseId"))
head(shared_genes)
n_comparisons <- nrow(shared_genes)
n_total_genes <- length(unique(data$geneId))
shared_genes_p <- shared_genes %>%
mutate(n_total_genes = n_total_genes,
p = pvalue_hyper(n_shared_genes, n_genes.y, n_total_genes, n_genes.x))
head(shared_genes_p)
summary(shared_genes_p$p)
shared_genes_p[shared_genes_p$p == 0, "p"] = 0.1^(323.6)
shared_genes_p <- shared_genes_p %>%
mutate(p_bonferroni = p*n_comparisons,
p_log = -log10(p),
p_bonferroni_log = -log10(p))
summary(shared_genes_p$p_log)
hist(shared_genes_p$p_log)
summary(shared_genes_p$p_log)
# Number of significant disorder pairs based on p < .001
sum(shared_genes_p$p_log > 2)
# proportion of significant pairs out of all pairs
sum(shared_genes_p$p_log > 2) / n_comparisons
diseases <- data[c("diseaseId", "diseaseName", "diseaseType", "diseaseClass", "diseaseSemanticType")] %>%
distinct()
diseases <- diseases %>%
inner_join(disease_genes, by="diseaseId")
head(diseases)
# import autism terms
autism_df <- read.table(file = 'processed_data/autism_terms.csv',
sep = '\t',
header = TRUE,
quote = "\"")
diseases_new <- diseases %>%
left_join(autism_df[c("diseaseId", "autism_subtype", "autism_subtype_broad")],
by="diseaseId") %>%
mutate(autism_subtype = ifelse(is.na(autism_subtype), "Not Autism", autism_subtype),
autism_subtype_broad = ifelse(is.na(autism_subtype_broad), "Not Autism", autism_subtype_broad))
saveRDS(diseases_new, file = "processed_data/diseases_grouped.rds")
shared_genes_p_new <- shared_genes_p %>%
select(-p_bonferroni, -p_bonferroni_log)
saveRDS(shared_genes_p_new,
file = "processed_data/shared_genes_grouped.rds")
View(nodes)
View(nodes_df)
View(x1)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(igraph)
data <- read.table(file = 'processed_data/curated_gene_disease_associations_autism_grouped.csv',
sep = '\t',
header = TRUE,
quote = "\"")
df_temp <- data[c("geneId", "diseaseId")] %>%
distinct()
shared_genes <- df_temp %>%
inner_join(df_temp, by = "geneId") %>%
# Filter out when when rows where two disorders are the same
filter(diseaseId.x != diseaseId.y) %>%
# Filter out duplicate rows where
# diseaseId.x and diseaseId.y in row1 is reverse in row2
filter(diseaseId.x < diseaseId.y)
# Inspect
shared_genes[shared_genes$geneId == 1, ]
# count shared genes per disorder
shared_genes <- shared_genes %>%
group_by(diseaseId.x, diseaseId.y) %>%
summarise(n_shared_genes = n(),
.groups = "drop")
head(shared_genes)
pvalue_hyper <- function(q, m, n, k, lower.tail=FALSE){
# q size intersection
# m size of B
# n size of universe
# k size of A
if (lower.tail == FALSE){
phyper(q, m, n, k, lower.tail = FALSE)+ dhyper(q, m, n, k)
} else{
phyper(q, m, n, k)
}
}
pvalue_hyper.0 <- function(A, B, num_tot, lower.tail=FALSE){
setA <- unique(A)
setB <- unique(B)
nA <- length(setA)
nB <- length(setB)
AB <- intersect(setA,setB)
nAB <- length(AB)
return(pvalue_hyper(nAB, nB, num_tot - nB, nA, lower.tail = lower.tail))
}
disease_genes <- data %>%
select(geneId, diseaseId) %>%
distinct() %>%
group_by(diseaseId) %>%
summarise(n_genes = n(),
.groups = "drop")
head(disease_genes)
shared_genes <- shared_genes %>%
inner_join(disease_genes, by = c("diseaseId.x" = "diseaseId")) %>%
inner_join(disease_genes, by = c("diseaseId.y" = "diseaseId"))
head(shared_genes)
n_comparisons <- nrow(shared_genes)
n_total_genes <- length(unique(data$geneId))
shared_genes_p <- shared_genes %>%
mutate(n_total_genes = n_total_genes,
p = pvalue_hyper(n_shared_genes, n_genes.y, n_total_genes, n_genes.x))
head(shared_genes_p)
summary(shared_genes_p$p)
shared_genes_p[shared_genes_p$p == 0, "p"] = 0.1^(323.6)
shared_genes_p <- shared_genes_p %>%
mutate(p_bonferroni = p*n_comparisons,
p_log = -log10(p),
p_bonferroni_log = -log10(p))
summary(shared_genes_p$p_log)
hist(shared_genes_p$p_log)
summary(shared_genes_p$p_log)
# Number of significant disorder pairs based on p < .001
sum(shared_genes_p$p_log > 2)
# proportion of significant pairs out of all pairs
sum(shared_genes_p$p_log > 2) / n_comparisons
diseases <- data[c("diseaseId", "diseaseName", "diseaseType", "diseaseClass", "diseaseSemanticType")] %>%
distinct()
diseases <- diseases %>%
inner_join(disease_genes, by="diseaseId")
head(diseases)
View(data)
data <- read.table(file = 'processed_data/curated_gene_disease_associations_autism_grouped.csv',
sep = '\t',
header = TRUE,
quote = "\"")
View(data)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(igraph)
data <- read.table(file = 'processed_data/curated_gene_disease_associations_autism_grouped.csv',
sep = '\t',
header = TRUE,
quote = "\"")
df_temp <- data[c("geneId", "diseaseId")] %>%
distinct()
shared_genes <- df_temp %>%
inner_join(df_temp, by = "geneId") %>%
# Filter out when when rows where two disorders are the same
filter(diseaseId.x != diseaseId.y) %>%
# Filter out duplicate rows where
# diseaseId.x and diseaseId.y in row1 is reverse in row2
filter(diseaseId.x < diseaseId.y)
# Inspect
shared_genes[shared_genes$geneId == 1, ]
# count shared genes per disorder
shared_genes <- shared_genes %>%
group_by(diseaseId.x, diseaseId.y) %>%
summarise(n_shared_genes = n(),
.groups = "drop")
View(data)
head(shared_genes)
pvalue_hyper <- function(q, m, n, k, lower.tail=FALSE){
# q size intersection
# m size of B
# n size of universe
# k size of A
if (lower.tail == FALSE){
phyper(q, m, n, k, lower.tail = FALSE)+ dhyper(q, m, n, k)
} else{
phyper(q, m, n, k)
}
}
pvalue_hyper.0 <- function(A, B, num_tot, lower.tail=FALSE){
setA <- unique(A)
setB <- unique(B)
nA <- length(setA)
nB <- length(setB)
AB <- intersect(setA,setB)
nAB <- length(AB)
return(pvalue_hyper(nAB, nB, num_tot - nB, nA, lower.tail = lower.tail))
}
disease_genes <- data %>%
select(geneId, diseaseId) %>%
distinct() %>%
group_by(diseaseId) %>%
summarise(n_genes = n(),
.groups = "drop")
head(disease_genes)
shared_genes <- shared_genes %>%
inner_join(disease_genes, by = c("diseaseId.x" = "diseaseId")) %>%
inner_join(disease_genes, by = c("diseaseId.y" = "diseaseId"))
head(shared_genes)
n_comparisons <- nrow(shared_genes)
n_total_genes <- length(unique(data$geneId))
shared_genes_p <- shared_genes %>%
mutate(n_total_genes = n_total_genes,
p = pvalue_hyper(n_shared_genes, n_genes.y, n_total_genes, n_genes.x))
head(shared_genes_p)
summary(shared_genes_p$p)
shared_genes_p[shared_genes_p$p == 0, "p"] = 0.1^(323.6)
shared_genes_p <- shared_genes_p %>%
mutate(p_bonferroni = p*n_comparisons,
p_log = -log10(p),
p_bonferroni_log = -log10(p))
summary(shared_genes_p$p_log)
hist(shared_genes_p$p_log)
summary(shared_genes_p$p_log)
# Number of significant disorder pairs based on p < .001
sum(shared_genes_p$p_log > 2)
# proportion of significant pairs out of all pairs
sum(shared_genes_p$p_log > 2) / n_comparisons
View(data)
diseases <- data[c("diseaseId", "diseaseName", "diseaseType", "diseaseClass", "diseaseSemanticType", "autism_subtype_broad")] %>%
distinct()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(igraph)
data <- read.table(file = 'processed_data/curated_gene_disease_associations_autism_grouped.csv',
sep = '\t',
header = TRUE,
quote = "\"")
df_temp <- data[c("geneId", "diseaseId")] %>%
distinct()
shared_genes <- df_temp %>%
inner_join(df_temp, by = "geneId") %>%
# Filter out when when rows where two disorders are the same
filter(diseaseId.x != diseaseId.y) %>%
# Filter out duplicate rows where
# diseaseId.x and diseaseId.y in row1 is reverse in row2
filter(diseaseId.x < diseaseId.y)
# Inspect
shared_genes[shared_genes$geneId == 1, ]
# count shared genes per disorder
shared_genes <- shared_genes %>%
group_by(diseaseId.x, diseaseId.y) %>%
summarise(n_shared_genes = n(),
.groups = "drop")
head(shared_genes)
pvalue_hyper <- function(q, m, n, k, lower.tail=FALSE){
# q size intersection
# m size of B
# n size of universe
# k size of A
if (lower.tail == FALSE){
phyper(q, m, n, k, lower.tail = FALSE)+ dhyper(q, m, n, k)
} else{
phyper(q, m, n, k)
}
}
pvalue_hyper.0 <- function(A, B, num_tot, lower.tail=FALSE){
setA <- unique(A)
setB <- unique(B)
nA <- length(setA)
nB <- length(setB)
AB <- intersect(setA,setB)
nAB <- length(AB)
return(pvalue_hyper(nAB, nB, num_tot - nB, nA, lower.tail = lower.tail))
}
disease_genes <- data %>%
select(geneId, diseaseId) %>%
distinct() %>%
group_by(diseaseId) %>%
summarise(n_genes = n(),
.groups = "drop")
head(disease_genes)
shared_genes <- shared_genes %>%
inner_join(disease_genes, by = c("diseaseId.x" = "diseaseId")) %>%
inner_join(disease_genes, by = c("diseaseId.y" = "diseaseId"))
head(shared_genes)
n_comparisons <- nrow(shared_genes)
n_total_genes <- length(unique(data$geneId))
shared_genes_p <- shared_genes %>%
mutate(n_total_genes = n_total_genes,
p = pvalue_hyper(n_shared_genes, n_genes.y, n_total_genes, n_genes.x))
head(shared_genes_p)
summary(shared_genes_p$p)
shared_genes_p[shared_genes_p$p == 0, "p"] = 0.1^(323.6)
shared_genes_p <- shared_genes_p %>%
mutate(p_bonferroni = p*n_comparisons,
p_log = -log10(p),
p_bonferroni_log = -log10(p))
summary(shared_genes_p$p_log)
hist(shared_genes_p$p_log)
summary(shared_genes_p$p_log)
# Number of significant disorder pairs based on p < .001
sum(shared_genes_p$p_log > 2)
# proportion of significant pairs out of all pairs
sum(shared_genes_p$p_log > 2) / n_comparisons
diseases <- data[c("diseaseId", "diseaseName", "diseaseType", "diseaseClass", "diseaseSemanticType", "autism_subtype_broad")] %>%
distinct()
diseases <- diseases %>%
inner_join(disease_genes, by="diseaseId")
head(diseases)
View(diseases)
diseases <- diseases %>%
mutate(is_autism = ifelse(autism_subtype_broad == "Not Autism", FALSE, TRUE)
diseases <- diseases %>%
mutate(is_autism = ifelse(autism_subtype_broad == "Not Autism", FALSE, TRUE))
View(diseases)
write.csv(diseases, "processed_data/nodes_diseases_autismgrouped.csv", row.names=FALSE)
shared_genes_p_new <- shared_genes_p %>%
select(-p_bonferroni, -p_bonferroni_log)
write.csv(shared_genes_p_new, "processed_data/edges_shared_genes_autismgrouped.csv", row.names=FALSE)
View(x1)
write.csv(diseases, "processed_data/nodes_diseases_AutismGrouped.csv", row.names=FALSE)
shared_genes_p_new <- shared_genes_p %>%
select(-p_bonferroni, -p_bonferroni_log)
write.csv(shared_genes_p_new, "processed_data/edges_shared_genes_AutismGrouped.csv", row.names=FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(igraph)
data <- read.table(file = 'processed_data/curated_gene_disease_associations_autism_grouped.csv',
sep = '\t',
header = TRUE,
quote = "\"")
df_temp <- data[c("geneId", "diseaseId")] %>%
distinct()
shared_genes <- df_temp %>%
inner_join(df_temp, by = "geneId") %>%
# Filter out when when rows where two disorders are the same
filter(diseaseId.x != diseaseId.y) %>%
# Filter out duplicate rows where
# diseaseId.x and diseaseId.y in row1 is reverse in row2
filter(diseaseId.x < diseaseId.y)
# Inspect
shared_genes[shared_genes$geneId == 1, ]
# count shared genes per disorder
shared_genes <- shared_genes %>%
group_by(diseaseId.x, diseaseId.y) %>%
summarise(n_shared_genes = n(),
.groups = "drop")
head(shared_genes)
pvalue_hyper <- function(q, m, n, k, lower.tail=FALSE){
# q size intersection
# m size of B
# n size of universe
# k size of A
if (lower.tail == FALSE){
phyper(q, m, n, k, lower.tail = FALSE)+ dhyper(q, m, n, k)
} else{
phyper(q, m, n, k)
}
}
pvalue_hyper.0 <- function(A, B, num_tot, lower.tail=FALSE){
setA <- unique(A)
setB <- unique(B)
nA <- length(setA)
nB <- length(setB)
AB <- intersect(setA,setB)
nAB <- length(AB)
return(pvalue_hyper(nAB, nB, num_tot - nB, nA, lower.tail = lower.tail))
}
disease_genes <- data %>%
select(geneId, diseaseId) %>%
distinct() %>%
group_by(diseaseId) %>%
summarise(n_genes = n(),
.groups = "drop")
head(disease_genes)
shared_genes <- shared_genes %>%
inner_join(disease_genes, by = c("diseaseId.x" = "diseaseId")) %>%
inner_join(disease_genes, by = c("diseaseId.y" = "diseaseId"))
head(shared_genes)
n_comparisons <- nrow(shared_genes)
n_total_genes <- length(unique(data$geneId))
shared_genes_p <- shared_genes %>%
mutate(n_total_genes = n_total_genes,
p = pvalue_hyper(n_shared_genes, n_genes.y, n_total_genes, n_genes.x))
head(shared_genes_p)
summary(shared_genes_p$p)
shared_genes_p[shared_genes_p$p == 0, "p"] = 0.1^(323.6)
shared_genes_p <- shared_genes_p %>%
mutate(p_bonferroni = p*n_comparisons,
p_log = -log10(p),
p_bonferroni_log = -log10(p))
summary(shared_genes_p$p_log)
hist(shared_genes_p$p_log)
summary(shared_genes_p$p_log)
# Number of significant disorder pairs based on p < .001
sum(shared_genes_p$p_log > 2)
# proportion of significant pairs out of all pairs
sum(shared_genes_p$p_log > 2) / n_comparisons
diseases <- data[c("diseaseId", "diseaseName", "diseaseType", "diseaseClass", "diseaseSemanticType", "autism_subtype_broad")] %>%
distinct()
diseases <- diseases %>%
inner_join(disease_genes, by="diseaseId")
head(diseases)
diseases <- diseases %>%
mutate(is_autism = ifelse(autism_subtype_broad == "Not Autism", FALSE, TRUE))
write.csv(diseases, "processed_data/nodes_diseases_AutismGrouped.csv", row.names=FALSE)
shared_genes_p_new <- shared_genes_p %>%
select(-p_bonferroni, -p_bonferroni_log)
write.csv(shared_genes_p_new, "processed_data/edges_shared_genes_AutismGrouped.csv", row.names=FALSE)
